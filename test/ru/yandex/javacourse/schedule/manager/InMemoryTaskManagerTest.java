package ru.yandex.javacourse.schedule.manager;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ru.yandex.javacourse.schedule.tasks.Epic;
import ru.yandex.javacourse.schedule.tasks.Subtask;
import ru.yandex.javacourse.schedule.tasks.Task;
import ru.yandex.javacourse.schedule.tasks.TaskStatus;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class InMemoryTaskManagerTest {
    TaskManager manager;

    @BeforeEach
    public void initManager(){
        manager = Managers.getDefault();
    }

    @Test
    public void testAddTask() {
        Task task = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        manager.addNewTask(task);
        assertEquals(1, manager.getTasks().size(), "task should be added");
        Task addedTask = manager.getTasks().get(0);
        assertEquals(task, addedTask, "added task id should be set");
        Task byIdTask = manager.getTask(task.getId());
        assertEquals(task, byIdTask, "added task id should be found");
    }

    @Test
    public void testAddTaskWithId(){
        Task task = new Task(42, "Test 1", "Testing task 1", TaskStatus.NEW);
        manager.addNewTask(task);
        assertEquals(1, manager.getTasks().size(), "task should be added");
        Task addedTask = manager.getTasks().get(0);
        assertEquals(task, addedTask, "Task in wrong place");
        assertEquals(1, task.getId(), "updated task id should be set");
    }

    @Test
    public void testAddTaskWithAndWithoutId(){
        Task task0 = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        Task task1 = new Task(1, "Test 2", "Testing task 2", TaskStatus.NEW);
        //System.out.println("Test 1 " + task0.getId() + " Test 2 " + task1.getId());
        manager.addNewTask(task0);
        manager.addNewTask(task1);
        //System.out.println("Test 1 " + task0.getId() + " Test 2 " + task1.getId());
        assertEquals(2, manager.getTasks().size(), "lost a task with predefined id");
        assertEquals(1, task0.getId(), "autogenerated id should be 1");
        assertEquals(2, task1.getId(), "id of second task in manager should be 2");
    }

    @Test
    public void checkTaskNotChangedAfterAddTask() {
        int id = 1;
        String name = "Test 1";
        String description = "Testing task 1";
        TaskStatus status = TaskStatus.NEW;
        Task task1before = new Task(id, name, description, status);
        manager.addNewTask(task1before);
        Task task1after = manager.getTask(task1before.getId());
        assertEquals(task1after.getId(), id);
        assertEquals(task1after.getDescription(), description);
        assertEquals(task1after.getStatus(), status);
        assertEquals(task1after.getName(), name);
    }

    @Test
    void epicAndSubtaskLifecycle() {

        Epic epic = new Epic("Epic 1", "Testing epic 1");
        int epicId = manager.addNewEpic(epic);

        Subtask subtask = new Subtask("SubTask 1", "Testing subTask", TaskStatus.NEW, epicId);
        Integer subId = manager.addNewSubtask(subtask);
        assertNotNull(subId);


        List<?> epicSubs = manager.getEpicSubtasks(epicId);
        assertTrue(epicSubs.contains(subtask), "subtask id should be in epicSubs");


        manager.deleteSubtask(subId);
        List<?> epicSubsAfter = manager.getEpicSubtasks(epicId);
        assertFalse(epicSubsAfter.contains(subtask), "subtask should be deleted");
    }

    @Test
    void deleteEpicRemovesSubtasks() {

        Epic epic = new Epic("Epic 1", "Testing epic 1");
        int epicId = manager.addNewEpic(epic);
        Subtask subtask = new Subtask("SubTask 1","Testing subTask", TaskStatus.NEW, epicId);

        manager.deleteEpic(epicId);

        assertFalse(manager.getEpics().contains(epic), "epic not deleted");

        assertFalse(manager.getSubtasks().contains(subtask), "subtask not deleted");
    }

    @Test
    void changingTaskIdAfterAddLeadsToInconsistency() {
        Task task = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        int assigned = manager.addNewTask(task);
        assertEquals(assigned, task.getId(), "ID after added should same as assigned");
        task.setId(999);
        assertEquals(assigned, task.getId(), "ID after added should not be changed");
        Task OldTaskId = manager.getTask(assigned); // менеджер по-прежнему хранит объект в map по ключу assigned
        assertEquals(assigned, OldTaskId.getId(), "task ID differences from key");
    }

    @Test
    void epicStatusUpdatesCorrectly() {
        Epic epic = new Epic("Epic", "Testing epic 1");
        int epicId = manager.addNewEpic(epic);

        Subtask s1 = new Subtask("subTask1", "Testing subTask 1", TaskStatus.NEW, epicId);
        Subtask s2 = new Subtask("subTask2", "Testing subTask 2", TaskStatus.NEW, epicId);
        manager.addNewSubtask(s1);
        manager.addNewSubtask(s2);

        assertEquals(TaskStatus.NEW, manager.getEpic(epicId).getStatus());

        s1.setStatus(TaskStatus.DONE);
        manager.updateSubtask(s1);
        assertEquals(TaskStatus.IN_PROGRESS, manager.getEpic(epicId).getStatus());

        s2.setStatus(TaskStatus.DONE);
        manager.updateSubtask(s2);
        assertEquals(TaskStatus.DONE, manager.getEpic(epicId).getStatus());
    }

    @Test
    void clearTasksAlsoClearsHistory() {
        Task t1 = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        Task t2 = new Task("Test 2", "Testing task 2", TaskStatus.NEW);
        manager.addNewTask(t1);
        manager.addNewTask(t2);

        manager.getTask(t1.getId());
        manager.getTask(t2.getId());
        assertEquals(2, manager.getHistory().size(), "History not added");

        manager.deleteTasks();
        assertTrue(manager.getTasks().isEmpty(), "Tasks not cleared");
        assertTrue(manager.getHistory().isEmpty(), "History not cleared");
    }

    @Test
    void epicSubtasksListClearsCorrectlyAfterDeletion() {
        Epic epic = new Epic("epic", "Testing epic 1");
        int epicId = manager.addNewEpic(epic);
        Subtask s = new Subtask("subTask", "Testing subTask 1", TaskStatus.NEW, epicId);
        int subId = manager.addNewSubtask(s);

        manager.deleteSubtask(subId);
        Epic updatedEpic = manager.getEpic(epicId);
        assertTrue(updatedEpic.getSubtaskIds().isEmpty(), "Epic still holds deleted subtask id");
    }

    @Test
    void changingFieldsAfterAddDoesNotCorruptManager() {
        Task task = new Task("Task 1", "Testing Task 1", TaskStatus.NEW);
        int id = manager.addNewTask(task);
        task.setName("Changed");
        task.setDescription("New Task 1");

        Task stored = manager.getTask(id);
        assertEquals("Changed", stored.getName(), "Manager should reflect changed name");
        assertEquals("New Task 1", stored.getDescription(), "Manager should reflect changed desc");
    }
}
